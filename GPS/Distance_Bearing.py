import math
# 两个经纬度之间的距离
def LatLng2Dist(LatZero,LngZero,Lat,Lng):
    ra = 6378140  # radius of equator: meter
    rb = 6356755  # radius of polar: meter
    flatten = (ra - rb) / ra  # Partial rate of the earth
    # change angle to radians
    radLatA = math.radians(LatZero)
    radLonA = math.radians(LngZero)
    radLatB = math.radians(Lat)
    radLonB = math.radians(Lng)
 
    pA = math.atan(rb / ra * math.tan(radLatA))
    pB = math.atan(rb / ra * math.tan(radLatB))
    x = math.acos(math.sin(pA) * math.sin(pB) + math.cos(pA) * math.cos(pB) * math.cos(radLonA - radLonB))
    c1 = (math.sin(x) - x) * (math.sin(pA) + math.sin(pB))**2 / math.cos(x / 2)**2
    c2 = (math.sin(x) + x) * (math.sin(pA) - math.sin(pB))**2 / math.sin(x / 2)**2
    dr = flatten / 8 * (c1 - c2)
    distance = ra * (x + dr)
    return distance	
	
# 点1到点2方向沿逆时针方向转到正北方向的夹角
def LatLng2Degree(LatZero,LngZero,Lat,Lng):
    """
    Args:
        point p1(latA, lonA)
        point p2(latB, lonB)
    Returns:
        bearing between the two GPS points,
        default: the basis of heading direction is north
    """
    radLatA = math.radians(LatZero)
    radLonA = math.radians(LngZero)
    radLatB = math.radians(Lat)
    radLonB = math.radians(Lng)
    dLon = radLonB - radLonA
    y = math.sin(dLon) * math.cos(radLatB)
    x = math.cos(radLatA) * math.sin(radLatB) - math.sin(radLatA) * math.cos(radLatB) * math.cos(dLon)
    brng = math.degrees(math.atan2(y, x))
    brng = (brng + 360) % 360+1
    return brng

gps=[31.2686590,121.1639090, 31.2686059,121.1639472, 31.2685693,121.1640141,
31.2685121,121.1640714, 31.2684918,121.1641288, 31.2684345,121.1641670,
31.2684061,121.1642338, 31.2683528,121.1642817, 31.2683079,121.1643247,
31.2682548,121.1643820, 31.2681813,121.1644727, 31.2681326,121.1645443,
31.2680589,121.1646351, 31.2679854,121.1647115, 31.2679162,121.1648070,
31.2678631,121.1648786, 31.2678059,121.1649359, 31.2677401,121.1650127,
31.2676956,121.1651079, 31.2676914,121.1651940, 31.2677405,121.1652608,
31.2677978,121.1653227, 31.2678224,121.1653847, 31.2678962,121.1654656,
31.2679531,121.1655326, 31.2680141,121.1655807, 31.2680793,121.1656574,
31.2681488,121.1657146, 31.2682018,121.1658008, 31.2682508,121.1658580,
31.2683121,121.1659343, 31.2683977,121.1660301, 31.2684835,121.1660779,
31.2685692,121.1661593, 31.2686345,121.1662216, 31.2687243,121.1662932,
31.2687897,121.1663458, 31.2688795,121.1664031, 31.2689612,121.1664414,
31.2690551,121.1664700, 31.2691368,121.1664981, 31.2692259,121.1665265,
31.2693157,121.1665457, 31.2693972,121.1665747, 31.2694787,121.1665942,
31.2695685,121.1666086, 31.2696379,121.1666277, 31.2697155,121.1666325,
31.2697892,121.1666321, 31.2698706,121.1666471, 31.2699236,121.1666524,
31.2700054,121.1666570, 31.2700789,121.1666615, 31.2701484,121.1666565,
31.2702382,121.1666664, 31.2703280,121.1666671, 31.2703852,121.1666052,
31.2704097,121.1665480, 31.2704547,121.1664758, 31.2704669,121.1663426,
31.2704792,121.1662419, 31.2704874,121.1661507, 31.2704874,121.1660694,
31.2705078,121.1659882, 31.2705119,121.1659069, 31.2705160,121.1658018,
31.2705241,121.1657157, 31.2705323,121.1656202, 31.2705323,121.1655102,
31.2705609,121.1654146, 31.2705813,121.1653284, 31.2705895,121.1652229,
31.2705977,121.1651320, 31.2706222,121.1650366, 31.2706385,121.1649411,
31.2706508,121.1648407, 31.2706753,121.1647691, 31.2706916,121.1646687,
31.2707161,121.1645683, 31.2707365,121.1644442, 31.2707692,121.1643581,
31.2707937,121.1642483, 31.2708223,121.1641718, 31.2708468,121.1640858,
31.2708999,121.1639807, 31.2709245,121.1638946, 31.2709652,121.1637705,
31.2710143,121.1636605, 31.2710431,121.1635887, 31.2710840,121.1635121,
31.2711247,121.1634357, 31.2711819,121.1633689, 31.2712268,121.1632876,
31.2712678,121.1632063, 31.2713127,121.1631250, 31.2713656,121.1630583,
31.2714151,121.1629813, 31.2714599,121.1629098, 31.2715170,121.1628143,
31.2715782,121.1627618, 31.2716680,121.1626328, 31.2716922,121.1625472,
31.2717817,121.1623805, 31.2718102,121.1622802, 31.2718062,121.1621607,
31.2717899,121.1620889, 31.2717219,121.1620223, 31.2716361,121.1619458,
31.2715749,121.1618885, 31.2715177,121.1618169, 31.2714127,121.1617724,
31.2713181,121.1617255, 31.2712198,121.1616830, 31.2711182,121.1616441,
31.2709958,121.1616102, 31.2708686,121.1616019, 31.2707464,121.1616012,
31.2706237,121.1616115, 31.2705259,121.1616489, 31.2704033,121.1616922,
31.2702808,121.1617640, 31.2701829,121.1618448, 31.2700848,121.1619407,
31.2700073,121.1620264, 31.2699256,121.1621554, 31.2698725,121.1622558,
31.2698276,121.1623704, 31.2697704,121.1625183, 31.2697133,121.1626188,
31.2696153,121.1627338, 31.2695376,121.1628196, 31.2694601,121.1629200,
31.2693375,121.1630346, 31.2692396,121.1631590, 31.2691377,121.1632595,
31.2690438,121.1633598, 31.2689541,121.1634649, 31.2688726,121.1635701,
31.2687591,121.1637204, 31.2686590,121.1639090]
listangle=[]
listdistance=[]
for i in range(0,len(gps)-3,2):
    angleGPS=LatLng2Degree(gps[i],gps[i+1],gps[i+2],gps[i+3])
    distanceGPS=LatLng2Dist(gps[i],gps[i+1],gps[i+2],gps[i+3])
    listangle.append(angleGPS)
    listdistance.append(distanceGPS)
print(listangle)
print('\n')
print(listdistance)

